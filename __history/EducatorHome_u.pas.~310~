unit EducatorHome_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.ComCtrls, dm_u, Vcl.ExtCtrls, Vcl.DBCtrls, Vcl.StdCtrls, Vcl.Mask;

type
  TfrmEducatorHome = class(TForm)
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    dbgEnrolledStudents: TDBGrid;
    dbgQuizList: TDBGrid;
    dbgAttemptHistory: TDBGrid;
    dbeUser: TDBEdit;
    dbeQuiz: TDBEdit;
    btnFilterUser: TButton;
    btnFilterQuiz: TButton;
    lblEnrolledStudents: TLabel;
    lblAttemptHistory: TLabel;
    btnLogOut: TButton;
    lblEditQuizzes: TLabel;
    lblWrong2: TLabel;
    btnEditQuiz: TButton;
    btnAddQ: TButton;
    pnlNewQuiz: TPanel;
    edtCorrect: TEdit;
    edtWrong1: TEdit;
    edtWrong2: TEdit;
    edtWrong3: TEdit;
    lblCorrect: TLabel;
    lblWrong1: TLabel;
    lblWrong3: TLabel;
    btnSaveQuiz: TButton;
    lblQuestion: TLabel;
    edtQuestion: TEdit;
    lblQuizCreation: TLabel;
    pnlInfo: TPanel;
    lblInfo: TLabel;
    btnAddComment: TButton;
    dbeID: TDBEdit;
    lblEducatorName: TLabel;
    sgQuestions: TStringGrid;
    pnlEditQuizChoose: TPanel;
    btnEditThis: TButton;
    btnCancel: TButton;
    btnCreateQuiz: TButton;
    dbeSelIndex: TDBEdit;
    btnRemoveStudent: TButton;
    dbeEnrolledUser: TDBEdit;
    btnClearFilter: TButton;
    pnlStudentMgmt: TPanel;
    pnlQuizMgmt: TPanel;
    btnDeleteQuestion: TButton;
    btnDeleteQuiz: TButton;
    procedure FormShow(Sender: TObject);
    procedure btnLogOutClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure PageControl1Change(Sender: TObject);
    procedure btnAddCommentClick(Sender: TObject);
    procedure dbgAttemptHistoryCellClick(Column: TColumn);
    procedure btnCancelClick(Sender: TObject);
    procedure btnEditThisClick(Sender: TObject);
    procedure btnEditQuizClick(Sender: TObject);
    procedure btnCreateQuizClick(Sender: TObject);
    procedure btnSaveQuizClick(Sender: TObject);
    procedure btnAddQClick(Sender: TObject);
    procedure dbgQuizListCellClick(Column: TColumn);
    procedure sgQuestionsDblClick(Sender: TObject);
    procedure dbgEnrolledStudentsCellClick(Column: TColumn);
    procedure btnRemoveStudentClick(Sender: TObject);
    procedure btnFilterUserClick(Sender: TObject);
    procedure btnFilterQuizClick(Sender: TObject);
    procedure btnClearFilterClick(Sender: TObject);
    procedure dbgAttemptHistoryDrawColumnCell(Sender: TObject;
      const Rect: TRect; DataCol: Integer; Column: TColumn;
      State: TGridDrawState);
    procedure dbgEnrolledStudentsDrawColumnCell(Sender: TObject;
      const Rect: TRect; DataCol: Integer; Column: TColumn;
      State: TGridDrawState);
    procedure dbgQuizListDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure btnDeleteQuestionClick(Sender: TObject);
    procedure btnDeleteQuizClick(Sender: TObject);
  private
    { Private declarations }
    iQCount, iEditingID:integer;//iEditingID is used to track if a quiz is already existing or if im making a new one
    procedure clearSG();
    procedure MyChangeDir(ChangeToDir:string);
  public
    { Public declarations }

  end;

var
  frmEducatorHome: TfrmEducatorHome;
  iEditRow:integer;
  bEditingQuestion:boolean;
  sEditName, sSQLFilter:string;
implementation
uses Main_u;
{$R *.dfm}

procedure TfrmEducatorHome.btnAddCommentClick(Sender: TObject);
var
sComment,sPrevComment: string;
begin //gets existing comment, if there is, then prompts for a new comment
if dbeID.Text='' then
  begin  //if none selected, do nothing
    showmessage('Select a record first');
    exit;
  end;

sPrevComment:='';
with dm do
begin
  tbAttempts.Open;
  if tbAttempts.Locate('aID',dbeID.Field.Text,[]) = true then
  begin
    if tbAttempts['aFeedback'] <> NULL then sPrevComment:= tbAttempts['aFeedback'];
    sComment:= InputBox('Add comment for this attempt','Comment:',sPrevComment);
    tbAttempts.Edit;
    tbAttempts['aFeedback']:= sComment;
    tbAttempts.Post;
    tbAttempts.Close;
  end;//end if
end; //end with
PageControl1Change(Sender);
end;

procedure TfrmEducatorHome.btnAddQClick(Sender: TObject);
begin //ADDS COMPLETED QUESTION TO STRINGGRID
//checks if any fields are left blank invalidly
if (edtQuestion.Text = '') OR (edtCorrect.Text = '') OR (edtWrong1.Text='')
  OR (edtWrong2.Text = '') OR (edtWrong3.Text = '') then
  begin
    showmessage('Please fill in all required fields to add a question.');
    exit;
  end else //next if is for using my delimiter in a question, which is invalid
  if (Pos('~',edtQuestion.Text)<>0) OR (Pos('~',edtCorrect.Text)<>0) OR
  (Pos('~',edtWrong1.Text)<>0) OR (Pos('~',edtWrong2.Text)<>0) OR (Pos('~',edtWrong3.Text)<>0) then
  begin
    showmessage('Your data includes an invalid character ''~'', please remove it first.');
    exit;
  end;

//ADDS QUESTION TO STRINGGRID
if bEditingQuestion then
begin //need to place this question back where it was, not after everything else
  sgQuestions.Cells[0,iEditRow]:=edtQuestion.Text;
  sgQuestions.Cells[1,iEditRow]:=edtCorrect.Text;
  sgQuestions.Cells[2,iEditRow]:=edtWrong1.Text;
  sgQuestions.Cells[3,iEditRow]:=edtWrong2.Text;
  sgQuestions.Cells[4,iEditRow]:=edtWrong3.Text;
  iEditRow:=0;
  bEditingQuestion:=false;
end
else begin //if it's just a normal question to add
  inc(iQCount);
  sgQuestions.Cells[0,iQCount]:=edtQuestion.Text;
  sgQuestions.Cells[1,iQCount]:=edtCorrect.Text;
  sgQuestions.Cells[2,iQCount]:=edtWrong1.Text;
  sgQuestions.Cells[3,iQCount]:=edtWrong2.Text;
  sgQuestions.Cells[4,iQCount]:=edtWrong3.Text;
end;
//clear fields for next question
edtQuestion.Text:='';
edtCorrect.Text:='';
edtWrong1.Text:='';
edtWrong2.Text:='';
edtWrong3.Text:='';
edtQuestion.SetFocus;
end;

procedure TfrmEducatorHome.btnCancelClick(Sender: TObject);
begin
pnlEditQuizChoose.Visible:=false;
btnEditQuiz.Visible:=true;
btnCreateQuiz.Visible:=false;
end;

procedure TfrmEducatorHome.btnClearFilterClick(Sender: TObject);
begin
sSQLFilter:='';
PageControl1Change(Sender);//essentially refreshes my queries
end;

procedure TfrmEducatorHome.btnEditQuizClick(Sender: TObject);
begin
pnlEditQuizChoose.Visible:=true;
btnEditQuiz.Visible:=false;
btnCreateQuiz.Visible:=true;
//TODO figure out how to grey out clicking smth else??? maybe make all edits readonly
end;

procedure TfrmEducatorHome.btnEditThisClick(Sender: TObject);
var
i:integer;
tFile:textfile;
sPath,sLine:string;
begin//LOADING PROCEDURE FOR QUIZ THAT IS SELECTED IN DBGRID
if dbeSelIndex.Text='' then
  begin
    showmessage('Select a quiz first');
    exit;
  end;
clearSG();
iQCount:=0;
iEditingID:=StrToInt(dbeSelIndex.Text);//to know im editing a quiz for later use of saving
with dm do
  begin
    tbQuizzes.Open;
    tbQuizzes.Locate('qID',iEditingID,[]);
    //textfile reading
    sPath:= tbQuizzes['qFilePath'];
    MyChangeDir(objEducator.getName);//changes to folder of educator
    Delete(sPath,1,Pos('\',sPath));
    AssignFile(tFile,sPath);
    Reset(tFile);
    ReadLn(tFile,sEditName);//title of quiz, store it for saving again.
    while NOT EOF(tFile) do //reads QnA's into stringgrid
      begin
        inc(iQCount);
        ReadLn(tFile,sLine);
        for i := 0 to 4 do //fills a single row
          begin
            sgQuestions.Cells[i,iQCount]:= frmMain.GetQuizItem(i+1,sLine);
          end;
      end;
    Closefile(tFile);
    tbQuizzes.Close;
  end;

pnlEditQuizChoose.Visible:=false;
lblEditQuizzes.Visible:=true;
lblQuizCreation.Visible:=false;
pnlInfo.Visible:=false;
end;


procedure TfrmEducatorHome.btnFilterQuizClick(Sender: TObject);
begin
if dbeQuiz.Text='' then
  begin
    showmessage('Select a record first');
    exit;
  end;

sSQLFilter:=' AND (qQuizName='+QuotedStr(dbeQuiz.Text)+');';
PageControl1Change(Sender);
end;

procedure TfrmEducatorHome.btnFilterUserClick(Sender: TObject);
begin
if dbeUser.Text='' then exit;//nothing to filter
sSQLFilter:=' AND (stuName='+QuotedStr(dbeUser.Text)+');';
PageControl1Change(Sender);
end;

procedure TfrmEducatorHome.btnLogOutClick(Sender: TObject);
begin //CLEANUP STUFF, UNBIND DBEDITS, DESTROY OBJ AND CLEAR COMPONENTS
self.Hide;
frmMain.Show;
//iEducatorID:= 0;
Query.Close;
Query2.Close;
dbeID.DataField:='';
dbeUser.DataField:= '';
dbeQuiz.DataField:= '';
dbeEnrolledUser.DataField:='';
dbeSelIndex.DataField:='';
objEducator.Destroy;
frmMain.ledUsername.Clear;
frmMain.ledPassword.Clear;
frmMain.ledUsername.SetFocus;
sSQLFilter:='';
end;

procedure TfrmEducatorHome.btnRemoveStudentClick(Sender: TObject);
var
iStuID:integer;
begin
if dbeEnrolledUser.Text='' then
  begin
    showmessage('Select a student first');
    exit;
  end;

//get student's ID so I can delete the right record
with dm do
begin
  tbStudents.Open;
  tbStudents.Locate('stuName',dbeEnrolledUser.Text,[]);
  iStuID:= tbStudents['stuID'];//the student's id located by using name
  tbStudents.Close;
end;

//delete from enrollments table using SQL
Query2.Close;
Query2.SQL.Clear;
Query2.SQL.ADD('DELETE FROM tblEnrollments WHERE (enEducator='+IntToStr(objEducator.getID)+') AND ');
Query2.SQL.ADD('(enStudent='+ IntToStr(iStuID)+');');
Query2.ExecSQL;
showmessage('Student has successfully been removed from your subject.');
//delete all student's attempts from tblattempts   USE SQL FOR THIS TOO??? SHORTER??
with dm do
  begin
    tbAttempts.Open;
    tbAttempts.First;
    while not tbAttempts.EOF do
    begin
      if tbAttempts['aUser']=iStuID then tbAttempts.Delete;//deletes that attempt
      tbAttempts.Next;
    end;//end while

    tbAttempts.Close;
  end;             //end with
PageControl1Change(Sender);//refreshes my queries
end;

procedure TfrmEducatorHome.btnSaveQuizClick(Sender: TObject);
var
tFile:textfile;
sLine,sQuizName,sFileName:string;
i, j:integer;
begin  //saves all stringgrid questions to textfile
//makes sure the last question was also saved
if NOT((edtQuestion.Text = '') AND (edtCorrect.Text = '') AND (edtWrong1.Text='')
  AND (edtWrong2.Text = '') AND (edtwrong3.Text = '')) then
  begin
  showmessage('Add or remove your last question before saving the quiz!');
  exit;
  end;

if iQCount=0 then  //cant make an empty quiz
  begin
    showmessage('You cannot create an empty quiz');
    exit;
  end;

//handles getting the user's quiz name
sQuizName:= inputbox('Enter a name for your quiz','Enter a name: ',sEditName);
sEditName:='';//cleared, need it empty for next quizzes to be made
if sQuizName = '' then sQuizName:='Unnamed Quiz'; //for editing quiz maybe keep name of old quiz?

//SAVE QUIZ INFO to database edited or (else part) new
with dm do
begin                                   //WITH DM
tbQuizzes.Open;
if tbQuizzes.Locate('qID',iEditingID,[]) then//this is an edited quiz then
  begin //edit entry of quiz to change only quizname
    tbQuizzes.Edit;
    tbQuizzes['qQuizName']:=sQuizName;
    sFileName:=inttostr(objEducator.getID)+'a'+ inttostr(tbQuizzes['qID'])+'.txt';
    tbQuizzes.Post;
    tbQuizzes.Close;
  end
  else begin //if this is NEW quiz and not an edited one, do this
    tbQuizzes.Open;
    tbQuizzes.Sort:='qID ASC';
    tbQuizzes.Last;
    tbQuizzes.Insert;
    tbQuizzes['qQuizName']:=sQuizName;
    tbQuizzes['qEducator']:=objEducator.getID;
    tbQuizzes.Post;
    tbQuizzes.Close;

    //did it this way so i can use the primary key after it's been generated
    tbQuizzes.Open;
    tbQuizzes.Sort:='qID ASC';
    tbQuizzes.Last;//last entry will be the one i want to finish creating
    tbQuizzes.Edit;
    sFileName:=inttostr(objEducator.getID)+'a'+ inttostr(tbQuizzes['qID'])+'.txt';//name of textfile
    tbQuizzes['qFilePath']:=objEducator.getName+'\'+sFileName;
    tbQuizzes.Post;
    tbQuizzes.Close;
  end;//big else end
end;                            //WITH DM END

//get right dir setup
//sDirectory:=copy(GetCurrentDir,1,pos('Debug',GetCurrentDir)+5);//copies whole current directory + word debug (the 5)
//ChDir(sDirectory+'\'+objEducator.getName);
MyChangeDir(objEducator.getName); //changes dir to folder where txt is located
//saves QnA's to textfile
AssignFile(tFile,sFileName);
Rewrite(tFile);
WriteLn(tFile,sQuizName); //quiz name is first line always
for i := 1 to iQCount do
  begin //each question
    sLine:=sgQuestions.Cells[0,i];
    for j := 1 to 4 do //all possible answers into one line
      begin
        sLine:= sLine + '~' + sgQuestions.Cells[j,i];
      end;
    WriteLn(tFile,sLine+'~');//writing each question in turn
  end;
Closefile(tFile);
showmessage('Your quiz has been created successfully!');
//clear stringgrid
clearSG();
iQCount:=0;
//changes mode to quiz creation again
lblEditQuizzes.Visible:=false;
lblQuizCreation.Visible:=true;
pnlInfo.Visible:=true;
btnCreateQuiz.Visible:=false;
btnEditQuiz.Visible:=true;
end;

procedure TfrmEducatorHome.clearSG;
var
i,j:integer;
begin
for i := 1 to iQCount do
  begin
    for j := 0 to 4 do
      begin
        sgQuestions.Cells[j,i]:='';
      end;
  end;
end;

procedure TfrmEducatorHome.btnCreateQuizClick(Sender: TObject);
begin
//saves whatever's been done already
showmessage('Your current quiz will be saved before you can create a new quiz.');
btnSaveQuizClick(Sender);

end;

procedure TfrmEducatorHome.btnDeleteQuestionClick(Sender: TObject);
var
  i: Integer;
begin//deletes question that was double clicked,
for i := 0 to 4 do
  begin
    sgQuestions.Cells[i,iEditRow]:='';
  end;
dec(iQCount);
iEditRow:=0;
bEditingQuestion:=false;
btnDeleteQuestion.Enabled:=false;
edtCorrect.Clear;
edtWrong1.Clear;
edtWrong2.Clear;
edtWrong3.Clear;
edtQuestion.Clear;
end;

procedure TfrmEducatorHome.btnDeleteQuizClick(Sender: TObject);
begin
if dbeSelIndex.Text='' then
  begin
    showmessage('Select a quiz first');
    exit;
  end;

Query2.Close;
Query2.SQL.Clear;
Query2.SQL.Add('DELETE from tblQuizzes WHERE qID = ' +dbeSelIndex.Text);
Query2.ExecSQL;
end;

procedure TfrmEducatorHome.dbgAttemptHistoryCellClick(Column: TColumn);
begin
dbeUser.DataField:= 'stuName';
dbeQuiz.DataField:= 'qQuizName';  //TRY move this, doesn't have to assign every time?
dbeID.DataField:= 'aID';
end;

procedure TfrmEducatorHome.dbgAttemptHistoryDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
dbgAttemptHistory.Canvas.Brush.Color:=$7ecf5b;//fill color
dbgAttemptHistory.Canvas.Font.Color:=clBlack;//text color, overrides column color white
dbgAttemptHistory.DefaultDrawColumnCell(Rect,DataCol,Column,State);
end;

procedure TfrmEducatorHome.dbgEnrolledStudentsCellClick(Column: TColumn);
begin
dbeEnrolledUser.DataField:='stuName';
end;

procedure TfrmEducatorHome.dbgEnrolledStudentsDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
dbgEnrolledStudents.Canvas.Brush.Color:=$7ecf5b;//fill color
dbgEnrolledStudents.Canvas.Font.Color:=clBlack;//text color, overrides column color white
dbgEnrolledStudents.DefaultDrawColumnCell(Rect,DataCol,Column,State);
end;

procedure TfrmEducatorHome.dbgQuizListCellClick(Column: TColumn);
begin
dbeSelIndex.DataField:='qID';
end;

procedure TfrmEducatorHome.dbgQuizListDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
dbgQuizList.Canvas.Brush.Color:=$7ecf5b;//fill color
dbgQuizList.Canvas.Font.Color:=clBlack;//text color, overrides column color white
dbgQuizList.DefaultDrawColumnCell(Rect,DataCol,Column,State);
end;

procedure TfrmEducatorHome.FormClose(Sender: TObject; var Action: TCloseAction);
begin
Application.Terminate;
end;

procedure TfrmEducatorHome.FormShow(Sender: TObject);
begin
PageControl1Change(Sender); //this calls so the queries load the right data
                            //into the right grids and edits
iEditRow:=0;
bEditingQuestion:=false;
sEditName:='';
sSQLFilter:='';
dbeUser.DataSource:= dscQuery2;
dbeQuiz.DataSource:= dscQuery2;
dbeEnrolledUser.DataSource:= dscQuery;
dbeID.DataSource:= dscQuery2;
dbeSelIndex.DataSource:=dscQuery;
iQCount:=0;
lblEducatorName.Caption:= objEducator.getName;

//LOAD stringgrid stuff
sgQuestions.Cells[0,0]:='Question';
sgQuestions.Cells[1,0]:='Correct Answer';
sgQuestions.Cells[2,0]:='Wrong Answer#1';
sgQuestions.Cells[3,0]:='Wrong Answer#2';
sgQuestions.Cells[4,0]:='Wrong Answer#3';
end;

procedure TfrmEducatorHome.MyChangeDir(ChangeToDir: string);
var
sDir:string;
begin
sDir:=Copy(GetCurrentDir,1,pos('Debug',GetCurrentDir)+5);
ChDir(sDir+'\'+ChangeToDir);
end;

procedure TfrmEducatorHome.PageControl1Change(Sender: TObject);
begin //this event is triggered when I change to a new tab of the page control
if PageControl1.TabIndex = 1 then
  begin
    dbeEnrolledUser.DataField:='';
    dbgQuizList.DataSource:= dscQuery;
    Query.Close;
    Query.SQL.Clear;
    Query.SQL.Add('SELECT qID, qQuizName FROM tblQuizzes ');
    Query.SQL.Add('WHERE qEducator = '+IntToStr(objEducator.getID)+ ' ORDER BY qQuizName');
    Query.Open;
    dbgQuizList.Columns[0].Visible:=false;
    dbgQuizList.Columns[1].Title.Caption:='Quiz';
    frmMain.colorColumns(dbgQuizList,2);//own function, colors titles!
  end else if PageControl1.TabIndex = 0 then
  begin
    dbeSelIndex.DataField:='';
    dbgEnrolledStudents.DataSource:= dscQuery;
    //SQL Part is nested, the nested select get the attempts table but with educator shown as well
    //then by selecting only courses by specific educator and grouping by user
    //but instead of the user number I got the name instead by grabbing stuName from the student table
    Query.Close;
    Query.SQL.Clear;
    Query.SQL.Add('SELECT stuName, Round(AVG(aScore),2) as AverageScore FROM ');
    Query.SQL.Add(   '(SELECT qEducator, aQuiz, aUser, aScore ');
    Query.SQL.Add(   'FROM tblQuizzes, tblAttempts WHERE qID = aQuiz), tblStudents ');
    Query.SQL.Add('WHERE (qEducator= '+ IntToStr(objEducator.getID)+') AND (stuID= aUser)');
    Query.SQL.Add('GROUP BY stuName;');
    Query.Open;

    //naming columns
    dbgEnrolledStudents.Columns[0].Title.Caption:='Student';
    dbgEnrolledStudents.Columns[1].Title.Caption:='Average Grade';
    frmMain.colorColumns(dbgEnrolledStudents,2);//own function, colors titles!

    //attempt history dbgrid
    dbgAttemptHistory.DataSource:= dscQuery2;
    Query2.Close;
    Query2.SQL.Clear;
    Query2.SQL.Add('SELECT aID, aUser, aQuiz, qQuizName, stuName, aScore, aFeedback ');
    Query2.SQL.Add(   'FROM (SELECT qEducator, aID, aQuiz, aUser, aScore, aFeedback ');
    Query2.SQL.Add(   'FROM tblAttempts, tblQuizzes WHERE qID = aQuiz), tblQuizzes,tblStudents' );
    Query2.SQL.Add('WHERE (tblQuizzes.qEducator='+IntToStr(objEducator.getID)+')');
    Query2.SQL.Add(' AND (qID=aQuiz) AND (stuID=aUser)'+sSQLFilter);
    Query2.Open;
      //hide ID columns
    dbgAttemptHistory.Columns[0].Visible:= false;
    dbgAttemptHistory.Columns[1].Visible:=false;
    dbgAttemptHistory.Columns[2].Visible:=false;
    //sizing columns and naming
    dbgAttemptHistory.Columns[3].Width:=175;
    dbgAttemptHistory.Columns[3].Title.Caption:='Quiz';
    dbgAttemptHistory.Columns[4].Title.Caption:='Student';
    dbgAttemptHistory.Columns[4].Width:=170;
    dbgAttemptHistory.Columns[5].Title.Caption:='Score(%)';
    dbgAttemptHistory.Columns[6].Title.Caption:='Feedback';
    dbgAttemptHistory.Columns[6].Width:=175;
    frmMain.colorColumns(dbgAttemptHistory,7);//own function, colors titles!
  end;
end;

procedure TfrmEducatorHome.sgQuestionsDblClick(Sender: TObject);
begin
iEditRow:=sgQuestions.Row;
bEditingQuestion:=true;
edtQuestion.Text:=sgQuestions.Cells[0,iEditRow];
edtCorrect.Text:=sgQuestions.Cells[1,iEditRow];
edtWrong1.Text:=sgQuestions.Cells[2,iEditRow];
edtWrong2.Text:=sgQuestions.Cells[3,iEditRow];
edtWrong3.Text:=sgQuestions.Cells[4,iEditRow];
btnDeleteQuestion.Enabled:=true;
end;

end.
